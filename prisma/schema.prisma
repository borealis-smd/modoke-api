generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id           String               @id @default(uuid())
  first_name        String
  last_name         String?
  avatar_url        String               @db.VarChar(255)
  xp                Int
  role              Role                 @default(USER)
  level_id          Int
  created_at        DateTime             @default(now())
  updated_at        DateTime             @updatedAt
  Login             Login[]
  Level             Level                @relation(fields: [level_id], references: [level_id])
  Badges            UserHasBadge[]
  Attempts          Attempt[]
  Certificates      UserHasCertificate[]
  SectionProgresses SectionProgress[]
  UnitProgresses    UnitProgress[]
  LessonProgresses  LessonProgress[]
}

enum Role {
  USER
  ADMIN
}

model Login {
  login_id       String   @id @default(uuid())
  email          String   @unique
  password_hash  String?
  user_id        String
  is_google_user Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  User           User     @relation(fields: [user_id], references: [user_id])
}

model Level {
  level_id    Int       @id
  name        LevelName
  description String    @db.Text
  Users       User[]
  Section     Section?
}

enum LevelName {
  A // Beginner
  AA // Intermediate
  AAA // Advanced
}

model Section {
  section_id          Int               @id
  section_title       String            @db.VarChar(255)
  section_description String            @db.Text
  level_id            Int               @unique
  Level               Level             @relation(fields: [level_id], references: [level_id])
  Units               Unit[]
  Certificate         Certificate?
  SectionProgresses   SectionProgress[]
}

model SectionProgress {
  section_progress_id String    @id @default(uuid())
  section_id          Int
  user_id             String
  in_progress         Boolean   @default(false)
  is_locked           Boolean   @default(true)
  completed_at        DateTime?
  User                User      @relation(fields: [user_id], references: [user_id])
  Section             Section   @relation(fields: [section_id], references: [section_id])

  @@unique([section_id, user_id])
}

model Unit {
  unit_id          Int            @id @default(autoincrement())
  unit_sequence    Int            @unique
  unit_title       String         @db.VarChar(255)
  unit_description String         @db.Text
  section_id       Int
  Section          Section        @relation(fields: [section_id], references: [section_id])
  Lessons          Lesson[]
  Badge            Badge?
  UnitProgresses   UnitProgress[]
}

model UnitProgress {
  unit_progress_id String    @id @default(uuid())
  unit_id          Int
  user_id          String
  in_progress      Boolean   @default(false)
  is_locked        Boolean   @default(true)
  completed_at     DateTime?
  User             User      @relation(fields: [user_id], references: [user_id])
  Unit             Unit      @relation(fields: [unit_id], references: [unit_id])

  @@unique([unit_id, user_id])
}

model Lesson {
  lesson_id          Int              @id @default(autoincrement())
  lesson_sequence    Int              @unique
  lesson_title       String           @db.VarChar(255)
  lesson_description String           @db.Text
  unit_id            Int
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt
  Unit               Unit             @relation(fields: [unit_id], references: [unit_id])
  Explanations       Explanation[]
  Question           Question[]
  LessonProgresses   LessonProgress[]
}

model LessonProgress {
  lesson_progress_id String    @id @default(uuid())
  lesson_id          Int
  user_id            String
  in_progress        Boolean   @default(false)
  is_locked          Boolean   @default(true)
  completed_at       DateTime?
  User               User      @relation(fields: [user_id], references: [user_id])
  Lesson             Lesson    @relation(fields: [lesson_id], references: [lesson_id])

  @@unique([lesson_id, user_id])
}

model Explanation {
  explanation_id Int             @id @default(autoincrement())
  content        String          @db.Text
  part           ExplanationPart
  lesson_id      Int
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  Lesson         Lesson          @relation(fields: [lesson_id], references: [lesson_id])
}

enum ExplanationPart {
  PART_1
  PART_2
  PART_3
}

model Question {
  question_id          String    @id @default(uuid())
  question_text        String    @db.Text
  is_entrance_question Boolean
  xp                   Int
  lesson_id            Int?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  Lesson               Lesson?   @relation(fields: [lesson_id], references: [lesson_id])
  Options              Option[]
  Attempts             Attempt[]
}

// Alternativas
// Considera apenas questões de múltipla escolha.
model Option {
  option_id   String    @id @default(uuid())
  option_text String    @db.Text
  is_correct  Boolean
  question_id String
  Question    Question  @relation(fields: [question_id], references: [question_id])
  Attempts    Attempt[]
}

// Respostas marcadas
model Attempt {
  attempt_id         Int      @id @default(autoincrement())
  user_id            String
  question_id        String
  selected_option_id String
  attempted_at       DateTime
  User               User     @relation(fields: [user_id], references: [user_id])
  Question           Question @relation(fields: [question_id], references: [question_id])
  Option             Option   @relation(fields: [selected_option_id], references: [option_id])
}

model Badge {
  badge_id        Int            @id @default(autoincrement())
  badge_name      String
  badge_image_url String         @db.VarChar(255)
  unit_id         Int            @unique
  Unit            Unit           @relation(fields: [unit_id], references: [unit_id])
  Users           UserHasBadge[]
}

model UserHasBadge {
  user_has_badge_id String   @id @default(uuid())
  badge_id          Int
  user_id           String
  acquired_at       DateTime @default(now())
  User              User     @relation(fields: [user_id], references: [user_id])
  Badge             Badge    @relation(fields: [badge_id], references: [badge_id])
}

model Certificate {
  certificate_id   Int                  @id @default(autoincrement())
  certificate_text String               @db.Text
  section_id       Int                  @unique
  Section          Section              @relation(fields: [section_id], references: [section_id])
  Users            UserHasCertificate[]
}

model UserHasCertificate {
  user_has_certificate_id String      @id @default(uuid())
  user_id                 String
  certificate_id          Int
  acquired_at             DateTime    @default(now())
  User                    User        @relation(fields: [user_id], references: [user_id])
  Certificate             Certificate @relation(fields: [certificate_id], references: [certificate_id])
}
